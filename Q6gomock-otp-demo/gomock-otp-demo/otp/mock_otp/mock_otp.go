// Code generated by MockGen. DO NOT EDIT.
// Source: otp.go

package otp

import (
	reflect "reflect"
	"github.com/golang/mock/gomock"
)

// MockOTPService is a mock of OTPService interface.
type MockOTPService struct {
	ctrl     *gomock.Controller
	recorder *MockOTPServiceMockRecorder
}

// MockOTPServiceMockRecorder is the mock recorder for MockOTPService.
type MockOTPServiceMockRecorder struct {
	mock *MockOTPService
}

// NewMockOTPService creates a new mock instance.
func NewMockOTPService(ctrl *gomock.Controller) *MockOTPService {
	mock := &MockOTPService{ctrl: ctrl}
	mock.recorder = &MockOTPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOTPService) EXPECT() *MockOTPServiceMockRecorder {
	return m.recorder
}

func (m *MockOTPService) SendOTP(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOTP", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockOTPServiceMockRecorder) SendOTP(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTP", reflect.TypeOf((*MockOTPService)(nil).SendOTP), email)
}

func (m *MockOTPService) VerifyOTP(email string, otp string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", email, otp)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (mr *MockOTPServiceMockRecorder) VerifyOTP(email, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockOTPService)(nil).VerifyOTP), email, otp)
}
